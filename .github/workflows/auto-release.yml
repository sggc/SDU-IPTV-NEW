name: Auto Archive Release with File Packaging

on:
  push:
    branches: [ main, master ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes and generate release info
      id: release-info
      run: |
        # 获取当前日期和时间
        CURRENT_DATE=$(date +'%Y-%-m-%-d')
        CURRENT_DATETIME=$(date +'%Y-%m-%d %H:%M:%S')
        
        # 获取所有tag，统计今天的release数量
        git fetch --tags -f
        EXISTING_RELEASES=$(git tag -l "存档$CURRENT_DATE-r*" | wc -l)
        NEW_VERSION=$((EXISTING_RELEASES + 1))
        RELEASE_NAME="存档$CURRENT_DATE-r$NEW_VERSION"
        # 同时生成不带空格的版本用于文件名
        FILE_NAME="存档$CURRENT_DATE-r$NEW_VERSION"
        
        # 检测文件变动
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -vE "README.md|.gitignore" | head -20)
        
        # 检查是否有m3u文件变动
        M3U_CHANGED=false
        M3U_FILES=$(echo "$CHANGED_FILES" | grep -E "\.m3u$" || true)
        if [ -n "$M3U_FILES" ]; then
          M3U_CHANGED=true
          echo "检测到M3U文件变动: $M3U_FILES"
        fi
        
        # 输出到GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        echo "current_datetime=$CURRENT_DATETIME" >> $GITHUB_OUTPUT
        echo "m3u_changed=$M3U_CHANGED" >> $GITHUB_OUTPUT
        echo "m3u_files=$M3U_FILES" >> $GITHUB_OUTPUT
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        else
          echo "changed_files=无重要文件变更" >> $GITHUB_OUTPUT
        fi
        
        echo "Release名称: $RELEASE_NAME"
        echo "文件名: $FILE_NAME"
        echo "M3U文件变动: $M3U_CHANGED"
    
    - name: Create full repository archive
      run: |
        # 创建完整仓库压缩包 - 使用新的命名格式
        ARCHIVE_NAME="${{ steps.release-info.outputs.file_name }}.zip"
        zip -r "$ARCHIVE_NAME" . -x "*.git*" "*.github*" "*.zip" "*.tar.gz"
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "已创建完整存档: $ARCHIVE_NAME"
    
    - name: Create m3u files archive with renamed files
      if: steps.release-info.outputs.m3u_changed == 'true'
      run: |
        # 创建所有m3u文件的单独压缩包 - 使用新的命名格式
        M3U_ARCHIVE_NAME="${{ steps.release-info.outputs.file_name }}-m3u.zip"
        
        # 获取当前日期和release版本号
        CURRENT_DATE=$(date +'%Y-%-m-%-d')
        RELEASE_VERSION=$(echo "${{ steps.release-info.outputs.file_name }}" | grep -o 'r[0-9]*$')
        
        # 创建临时目录用于存放重命名的文件
        TEMP_DIR="temp_m3u_files"
        mkdir -p "$TEMP_DIR"
        
        # 查找所有变动的m3u文件
        CHANGED_M3U_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "\.m3u$" || true)
        
        if [ -n "$CHANGED_M3U_FILES" ]; then
          # 将文件列表转换为数组
          readarray -t FILES <<< "$CHANGED_M3U_FILES"
          
          # 处理每个m3u文件
          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              # 提取文件名（不包含扩展名）
              BASENAME=$(basename "$file" .m3u)
              # 生成新的文件名：原名-2025-9-1-r1.m3u
              NEW_FILENAME="${BASENAME}-${CURRENT_DATE}-${RELEASE_VERSION}.m3u"
              # 复制文件到临时目录并重命名
              cp "$file" "$TEMP_DIR/$NEW_FILENAME"
              echo "已重命名文件: $file -> $NEW_FILENAME"
            fi
          done
          
          # 将临时目录中的所有重命名文件添加到压缩包
          if [ "$(ls -A "$TEMP_DIR")" ]; then
            cd "$TEMP_DIR"
            zip "../$M3U_ARCHIVE_NAME" *
            cd ..
            echo "M3U_ARCHIVE_NAME=$M3U_ARCHIVE_NAME" >> $GITHUB_ENV
            echo "已创建M3U文件存档: $M3U_ARCHIVE_NAME"
          else
            echo "临时目录为空，未找到需要处理的M3U文件"
          fi
          
          # 清理临时目录
          rm -rf "$TEMP_DIR"
        else
          echo "未找到变动的M3U文件"
        fi
    
    - name: Prepare release assets
      run: |
        # 准备要发布的文件列表
        ASSETS="${{ env.ARCHIVE_NAME }}"
        
        if [ -n "${{ env.M3U_ARCHIVE_NAME }}" ]; then
          ASSETS="$ASSETS,${{ env.M3U_ARCHIVE_NAME }}"
        fi
        
        echo "ASSETS=$ASSETS" >> $GITHUB_ENV
        echo "将要发布的文件: $ASSETS"
    
    - name: Create release body
      run: |
        # 使用简单的echo命令逐行创建文件
        echo "# ${{ steps.release-info.outputs.release_name }}" > release_body.md
        echo "自动生成的存档版本" >> release_body.md
        echo "" >> release_body.md
        echo "## 变更文件" >> release_body.md
        echo "\`\`\`" >> release_body.md
        echo "${{ steps.release-info.outputs.changed_files }}" >> release_body.md
        echo "\`\`\`" >> release_body.md
        echo "" >> release_body.md
        echo "## 包含的存档文件" >> release_body.md
        echo "- **${{ env.ARCHIVE_NAME }}**: 完整仓库存档" >> release_body.md
        
        # 条件性添加m3u文件信息
        if [ -n "${{ env.M3U_ARCHIVE_NAME }}" ]; then
          echo "- **${{ env.M3U_ARCHIVE_NAME }}**: 重命名后的M3U文件存档" >> release_body.md
          echo "" >> release_body.md
          echo "### 包含的M3U文件（已重命名）" >> release_body.md
          # 显示重命名后的文件列表
          echo "所有变动的M3U文件已按规则重命名：" >> release_body.md
          echo "原名-${CURRENT_DATE}-${RELEASE_VERSION}.m3u" >> release_body.md
          echo "" >> release_body.md
          echo "原始文件列表：" >> release_body.md
          echo "${{ steps.release-info.outputs.m3u_files }}" >> release_body.md
        fi
        
        echo "" >> release_body.md
        echo "## 生成信息" >> release_body.md
        echo "- **生成时间**: ${{ steps.release-info.outputs.current_datetime }}" >> release_body.md
        echo "- **提交信息**: ${{ github.event.head_commit.message || '无提交信息' }}" >> release_body.md
        echo "- **提交哈希**: ${{ github.sha }}" >> release_body.md
        
        echo "已创建release说明文件"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release-info.outputs.release_name }}
        name: ${{ steps.release-info.outputs.release_name }}
        body_path: release_body.md
        files: ${{ env.ASSETS }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup temporary files
      if: always()
      run: |
        # 清理临时文件
        rm -f *.zip release_body.md
        echo "已清理临时文件"