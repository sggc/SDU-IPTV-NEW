name: Auto Release

on:
  push:
    branches: [ main, master ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes and generate release info
      id: release-info
      run: |
        # 获取当前日期和时间
        CURRENT_DATE=$(date +'%Y-%-m-%-d')
        CURRENT_DATETIME=$(date +'%Y-%m-%d %H:%M:%S')
        
        # 获取所有tag，统计今天的release数量
        git fetch --tags -f
        EXISTING_RELEASES=$(git tag -l "存档$CURRENT_DATE-r*" | wc -l)
        NEW_VERSION=$((EXISTING_RELEASES + 1))
        RELEASE_NAME="存档$CURRENT_DATE-r$NEW_VERSION"
        # 同时生成不带空格的版本用于文件名
        FILE_NAME="存档$CURRENT_DATE-r$NEW_VERSION"
        
        # 检测文件变动
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -vE "README.md|.gitignore" | head -20)
        
        # 检查是否有m3u文件变动
        M3U_CHANGED=false
        M3U_FILES=$(echo "$CHANGED_FILES" | grep -E "\.m3u$" || true)
        if [ -n "$M3U_FILES" ]; then
          M3U_CHANGED=true
          echo "检测到M3U文件变动: $M3U_FILES"
        fi
        
        # 输出到GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        echo "current_datetime=$CURRENT_DATETIME" >> $GITHUB_OUTPUT
        echo "m3u_changed=$M3U_CHANGED" >> $GITHUB_OUTPUT
        echo "m3u_files=$M3U_FILES" >> $GITHUB_OUTPUT
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        else
          echo "changed_files=无重要文件变更" >> $GITHUB_OUTPUT
        fi
        
        echo "Release名称: $RELEASE_NAME"
        echo "文件名: $FILE_NAME"
        echo "M3U文件变动: $M3U_CHANGED"
    
    - name: Create full repository archive
      run: |
        # 创建完整仓库压缩包
        ARCHIVE_NAME="${{ steps.release-info.outputs.file_name }}.zip"
        zip -r "$ARCHIVE_NAME" . -x "*.git*" "*.github*" "*.zip" "*.tar.gz"
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "已创建完整存档: $ARCHIVE_NAME"
    
    - name: Prepare m3u files for release
      if: steps.release-info.outputs.m3u_changed == 'true'
      run: |
        # 查找所有变动的m3u文件
        CHANGED_M3U_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "\.m3u$" || true)
        
        if [ -n "$CHANGED_M3U_FILES" ]; then
          # 将文件列表转换为数组
          readarray -t FILES <<< "$CHANGED_M3U_FILES"
          
          # 输出文件列表，用于后续步骤
          M3U_FILE_LIST=""
          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "找到M3U文件: $file"
              M3U_FILE_LIST="$M3U_FILE_LIST $file"
            fi
          done
          
          # 将文件列表保存到环境变量
          echo "M3U_FILE_LIST=$M3U_FILE_LIST" >> $GITHUB_ENV
          echo "已准备M3U文件列表"
        else
          echo "未找到变动的M3U文件"
        fi
    
    - name: Prepare release assets
      run: |
        # 准备要发布的文件列表
        ASSETS="${{ env.ARCHIVE_NAME }}"
        
        # 如果有变动的m3u文件，直接添加到发布文件列表
        if [ -n "${{ env.M3U_FILE_LIST }}" ]; then
          # 将m3u文件逐个添加到ASSETS列表
          for file in ${{ env.M3U_FILE_LIST }}; do
            ASSETS="$ASSETS,$file"
          done
        fi
        
        echo "ASSETS=$ASSETS" >> $GITHUB_ENV
        echo "将要发布的文件: $ASSETS"
    
    - name: Create release body
      run: |
        # 使用简单的echo命令逐行创建文件
        echo "# ${{ steps.release-info.outputs.release_name }}" > release_body.md
        echo "自动生成的存档版本" >> release_body.md
        echo "" >> release_body.md
        echo "## 变更文件" >> release_body.md
        echo "\`\`\`" >> release_body.md
        echo "${{ steps.release-info.outputs.changed_files }}" >> release_body.md
        echo "\`\`\`" >> release_body.md
        echo "" >> release_body.md
        echo "## 包含的存档文件" >> release_body.md
        echo "- **${{ env.ARCHIVE_NAME }}**: 完整仓库存档" >> release_body.md
        
        # 条件性添加m3u文件信息
        if [ -n "${{ env.M3U_FILE_LIST }}" ]; then
          echo "" >> release_body.md
          echo "## 单独发布的M3U文件" >> release_body.md
          echo "以下M3U文件已单独发布（保持原文件名）：" >> release_body.md
          echo "\`\`\`" >> release_body.md
          echo "${{ steps.release-info.outputs.m3u_files }}" >> release_body.md
          echo "\`\`\`" >> release_body.md
        fi
        
        echo "" >> release_body.md
        echo "## 生成信息" >> release_body.md
        echo "- **生成时间**: ${{ steps.release-info.outputs.current_datetime }}" >> release_body.md
        echo "- **提交信息**: ${{ github.event.head_commit.message || '无提交信息' }}" >> release_body.md
        echo "- **提交哈希**: ${{ github.sha }}" >> release_body.md
        
        echo "已创建release说明文件"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release-info.outputs.release_name }}
        name: ${{ steps.release-info.outputs.release_name }}
        body_path: release_body.md
        files: ${{ env.ASSETS }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup temporary files
      if: always()
      run: |
        # 清理临时文件
        rm -f *.zip release_body.md
        echo "已清理临时文件"